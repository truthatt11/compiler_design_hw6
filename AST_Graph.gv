Digraph AST
{
label = "AST_Graph.gv"
node0 [label ="PROGRAM_NODE"]
node1 [label ="VARIABLE_DECL_LIST_NODE"]
node2 [label ="DECLARATION_NODE VARIABLE_DECL"]
node3 [label ="IDENTIFIER_NODE int NORMAL_ID"]
node4 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node3 -> node4 [style = dashed]
node2 -> node3 [style = bold]
node1 -> node2 [style = bold]
node5 [label ="DECLARATION_NODE FUNCTION_DECL"]
node6 [label ="IDENTIFIER_NODE int NORMAL_ID"]
node7 [label ="IDENTIFIER_NODE fact NORMAL_ID"]
node8 [label ="PARAM_LIST_NODE"]
node9 [label ="BLOCK_NODE"]
node10 [label ="STMT_LIST_NODE"]
node11 [label ="STMT_NODE IF_STMT"]
node12 [label ="EXPR_NODE =="]
node13 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node14 [label ="CONST_VALUE_NODE 1"]
node13 -> node14 [style = dashed]
node12 -> node13 [style = bold]
node15 [label ="BLOCK_NODE"]
node16 [label ="STMT_LIST_NODE"]
node17 [label ="STMT_NODE RETURN_STMT"]
node18 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node17 -> node18 [style = bold]
node16 -> node17 [style = bold]
node15 -> node16 [style = bold]
node19 [label ="BLOCK_NODE"]
node20 [label ="STMT_LIST_NODE"]
node21 [label ="STMT_NODE ASSIGN_STMT"]
node22 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node23 [label ="EXPR_NODE -"]
node24 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node25 [label ="CONST_VALUE_NODE 1"]
node24 -> node25 [style = dashed]
node23 -> node24 [style = bold]
node22 -> node23 [style = dashed]
node21 -> node22 [style = bold]
node26 [label ="STMT_NODE RETURN_STMT"]
node27 [label ="EXPR_NODE *"]
node28 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node29 [label ="STMT_NODE FUNCTION_CALL_STMT"]
node30 [label ="IDENTIFIER_NODE fact NORMAL_ID"]
node31 [label ="NUL_NODE"]
node30 -> node31 [style = dashed]
node29 -> node30 [style = bold]
node28 -> node29 [style = dashed]
node27 -> node28 [style = bold]
node26 -> node27 [style = bold]
node21 -> node26 [style = dashed]
node20 -> node21 [style = bold]
node19 -> node20 [style = bold]
node15 -> node19 [style = dashed]
node12 -> node15 [style = dashed]
node11 -> node12 [style = bold]
node10 -> node11 [style = bold]
node9 -> node10 [style = bold]
node8 -> node9 [style = dashed]
node7 -> node8 [style = dashed]
node6 -> node7 [style = dashed]
node5 -> node6 [style = bold]
node32 [label ="DECLARATION_NODE FUNCTION_DECL"]
node33 [label ="IDENTIFIER_NODE int NORMAL_ID"]
node34 [label ="IDENTIFIER_NODE MAIN NORMAL_ID"]
node35 [label ="PARAM_LIST_NODE"]
node36 [label ="BLOCK_NODE"]
node37 [label ="VARIABLE_DECL_LIST_NODE"]
node38 [label ="DECLARATION_NODE VARIABLE_DECL"]
node39 [label ="IDENTIFIER_NODE int NORMAL_ID"]
node40 [label ="IDENTIFIER_NODE result NORMAL_ID"]
node39 -> node40 [style = dashed]
node38 -> node39 [style = bold]
node37 -> node38 [style = bold]
node41 [label ="STMT_LIST_NODE"]
node42 [label ="STMT_NODE FUNCTION_CALL_STMT"]
node43 [label ="IDENTIFIER_NODE write NORMAL_ID"]
node44 [label ="NONEMPTY_RELOP_EXPR_LIST_NODE"]
node45 [label ="CONST_VALUE_NODE \"Enter a number:\""]
node44 -> node45 [style = bold]
node43 -> node44 [style = dashed]
node42 -> node43 [style = bold]
node46 [label ="STMT_NODE ASSIGN_STMT"]
node47 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node48 [label ="STMT_NODE FUNCTION_CALL_STMT"]
node49 [label ="IDENTIFIER_NODE read NORMAL_ID"]
node50 [label ="NUL_NODE"]
node49 -> node50 [style = dashed]
node48 -> node49 [style = bold]
node47 -> node48 [style = dashed]
node46 -> node47 [style = bold]
node51 [label ="STMT_NODE ASSIGN_STMT"]
node52 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node53 [label ="EXPR_NODE +"]
node54 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node55 [label ="CONST_VALUE_NODE 1"]
node54 -> node55 [style = dashed]
node53 -> node54 [style = bold]
node52 -> node53 [style = dashed]
node51 -> node52 [style = bold]
node56 [label ="STMT_NODE IF_STMT"]
node57 [label ="EXPR_NODE >"]
node58 [label ="IDENTIFIER_NODE n NORMAL_ID"]
node59 [label ="CONST_VALUE_NODE 1"]
node58 -> node59 [style = dashed]
node57 -> node58 [style = bold]
node60 [label ="BLOCK_NODE"]
node61 [label ="STMT_LIST_NODE"]
node62 [label ="STMT_NODE ASSIGN_STMT"]
node63 [label ="IDENTIFIER_NODE result NORMAL_ID"]
node64 [label ="STMT_NODE FUNCTION_CALL_STMT"]
node65 [label ="IDENTIFIER_NODE fact NORMAL_ID"]
node66 [label ="NUL_NODE"]
node65 -> node66 [style = dashed]
node64 -> node65 [style = bold]
node63 -> node64 [style = dashed]
node62 -> node63 [style = bold]
node61 -> node62 [style = bold]
node60 -> node61 [style = bold]
node67 [label ="BLOCK_NODE"]
node68 [label ="STMT_LIST_NODE"]
node69 [label ="STMT_NODE ASSIGN_STMT"]
node70 [label ="IDENTIFIER_NODE result NORMAL_ID"]
node71 [label ="CONST_VALUE_NODE 1"]
node70 -> node71 [style = dashed]
node69 -> node70 [style = bold]
node68 -> node69 [style = bold]
node67 -> node68 [style = bold]
node60 -> node67 [style = dashed]
node57 -> node60 [style = dashed]
node56 -> node57 [style = bold]
node72 [label ="STMT_NODE FUNCTION_CALL_STMT"]
node73 [label ="IDENTIFIER_NODE write NORMAL_ID"]
node74 [label ="NONEMPTY_RELOP_EXPR_LIST_NODE"]
node75 [label ="CONST_VALUE_NODE \"The factorial is \""]
node74 -> node75 [style = bold]
node73 -> node74 [style = dashed]
node72 -> node73 [style = bold]
node76 [label ="STMT_NODE FUNCTION_CALL_STMT"]
node77 [label ="IDENTIFIER_NODE write NORMAL_ID"]
node78 [label ="NONEMPTY_RELOP_EXPR_LIST_NODE"]
node79 [label ="IDENTIFIER_NODE result NORMAL_ID"]
node78 -> node79 [style = bold]
node77 -> node78 [style = dashed]
node76 -> node77 [style = bold]
node80 [label ="STMT_NODE FUNCTION_CALL_STMT"]
node81 [label ="IDENTIFIER_NODE write NORMAL_ID"]
node82 [label ="NONEMPTY_RELOP_EXPR_LIST_NODE"]
node83 [label ="CONST_VALUE_NODE \"\n\""]
node82 -> node83 [style = bold]
node81 -> node82 [style = dashed]
node80 -> node81 [style = bold]
node76 -> node80 [style = dashed]
node72 -> node76 [style = dashed]
node56 -> node72 [style = dashed]
node51 -> node56 [style = dashed]
node46 -> node51 [style = dashed]
node42 -> node46 [style = dashed]
node41 -> node42 [style = bold]
node37 -> node41 [style = dashed]
node36 -> node37 [style = bold]
node35 -> node36 [style = dashed]
node34 -> node35 [style = dashed]
node33 -> node34 [style = dashed]
node32 -> node33 [style = bold]
node5 -> node32 [style = dashed]
node1 -> node5 [style = dashed]
node0 -> node1 [style = bold]
}
